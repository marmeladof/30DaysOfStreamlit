import streamlit as st
import numpy as np
import pandas as pd

# data load

data_path = "data/"
data_file = "Online Retail.csv"
dim_country_file = "dim_country.csv"
data_df = pd.read_csv(data_path + data_file)
dim_country_df = pd.read_csv(data_path + dim_country_file)
dim_country_dict = dim_country_df.groupby("Region")["Country"].apply(list) \
    .to_dict()
data_df = pd.merge(data_df, dim_country_df, how = "left", on = "Country")
data_df["InvoiceDate"] = pd.to_datetime(data_df["InvoiceDate"],
                                        format = "%d/%m/%Y %H:%M")
data_df["InvoiceDay"] = pd.to_datetime(data_df["InvoiceDate"],
                                       format = "%d/%m/%Y %H:%M").dt.date
data_df["InvoiceLineTotal"] = data_df["Quantity"] * data_df["UnitPrice"]

sales_df = data_df.loc[data_df["Quantity"] > 0]
returns_df = data_df.loc[data_df["Quantity"] <= 0]

region_ls = list(data_df["Region"].unique())
country_ls = list(data_df["Country"].unique())

country_sales_df = sales_df.groupby(["InvoiceDay", "Region", "Country"],
                                    as_index = False) \
    .agg(totalQuantity = ("Quantity", np.sum),
         totalInvoices = ("InvoiceNo", pd.Series.nunique),
         totalInvoicesGBP = ("InvoiceLineTotal", np.sum))
    
country_returns_df = sales_df.groupby(["InvoiceDay", "Region", "Country"],
                                      as_index = False) \
      .agg(totalQuantity = ("Quantity", np.sum),
           totalInvoices = ("InvoiceNo", pd.Series.nunique),
           totalInvoicesGBP = ("InvoiceLineTotal", np.sum))

# overview

st.set_page_config(page_title = "Sales",
                   page_icon = ":heavy_dollar_sign:")

st.header("Sales", divider = True)

region_options = st.multiselect("Selected regions:",
                                region_ls,
                                region_ls)

country_options_ls = sum([dim_country_dict[i] for i in region_options], [])

country_options = st.multiselect("Selected countries:",
                                 country_options_ls,
                                 country_options_ls)

grouping_options = st.selectbox("What data would you like to see?",
                                ("Region", "Country"))

chart_data_idx = country_sales_df["Region"].isin(region_options) & \
    country_sales_df["Country"].isin(country_options)
chart_data = country_sales_df.loc[chart_data_idx, :].reset_index(drop = True)

if grouping_options == "Region":
    chart_data = chart_data.groupby(["InvoiceDay", "Region"],
                                    as_index = False) \
        .agg(totalQuantity = ("totalQuantity", np.sum),
             totalInvoices = ("totalInvoices", np.sum),
             totalInvoicesGBP = ("totalInvoicesGBP", np.sum))

with st.container():
    st.write("**Units Sold by Marketplace**")
    if len(region_options) > 0:
        st.line_chart(chart_data, x = "InvoiceDay", y =  "totalQuantity",
                      color = grouping_options)
    else:
        st.write("*Select a region to generate chart*")

with st.container():
    st.write("**Invoices Generated by Marketplace**")
    if len(region_options) > 0:
        st.line_chart(chart_data, x = "InvoiceDay", y =  "totalInvoices",
                      color = grouping_options)
    else:
        st.write("*Select a region to generate chart*")

with st.container():
    st.write("**Sales by Marketplace (GBP)**")
    if len(region_options) > 0:
        st.line_chart(chart_data, x = "InvoiceDay", y =  "totalInvoicesGBP",
                      color = grouping_options)
    else:
        st.write("*Select a region to generate chart*")